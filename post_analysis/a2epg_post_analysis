#!/usr/bin/env python
"""Post analysis tool for performance assessment of A2EPG automatic
recognition capabilities. It takes several comma-separated value (.csv) files
that contains EPG profiles, and compares the corresponding auto (filename
ending in -auto.csv) and manual (-manual.csv) profile pairs.
"""

__author__ = 'Francisco Adasme and Camila Munoz'
__copyright__ = 'Copyright 2015, Universidad de Talca, Chile'

__version__ = '1.0'
__maintainer__ = 'Francisco Adasme'
__email__ = 'fadasmec@utalca.cl'

import argparse
import csv
import io
import math
import os
import sys
from itertools import chain, groupby, product
from statistics import StatisticsError, mean
from a2epg import EPGProfile, EPGComparator, EPGComparisonError
from a2epg.stats import ConfusionMatrix, EPGComparisonStats


def groupbyattr(iterable, key):
    from operator import attrgetter
    key = attrgetter(key)
    return groupby(sorted(iterable, key=key), key)


def percentile(data, percent, should_sort=True):
    if should_sort:
        data = sorted(data)
    n = len(data)
    if n == 0:
        raise StatisticsError("no percentile for empty data")
    if percent > 1:
        percent /= 100
    i = (n - 1) * percent
    f = math.floor(i)
    c = math.ceil(i)
    if f == c:
        return data[int(i)]
    return data[int(f)] * (c - i) + data[int(c)] * (i - f)


def tmean(data, k=1.5):
    data = sorted(data)
    n = len(data)
    if n < 1:
        raise StatisticsError('mean requires at least one data point')
    q1, q3 = percentile(data, 25, False), percentile(data, 75, False)
    iqr = q3 - q1
    lower, upper = q1 - iqr * k, q3 + iqr * k
    tdata = tuple(i for i in data if lower <= i <= upper)
    return mean(tdata)


# ------------------------------------------------------------------------------


def evaluate_group(basename, group):
    if len(group) != 2:
        print('WARNING! invalid epg profile group, got: {}'
              .format(tuple(profile.name for profile in group)))
        return False
    print('Comparing {}... '.format(basename), end='', flush=True)
    try:
        stats = EPGComparator(group).compare()
        print('done.')
        return stats
    except EPGComparisonError as err:
        print('failed.')
        print('ERROR!', str(err), end='\n\n')
        return False


def evaluate_groups(groups, opts):
    cnames = ('n', 'length', 'matches', 'full_matches')

    def accumulate_stats(stats):
        cfms.append(stats.cfm)
        for waveform in stats.cfm.categories:
            data = stats.get(waveform, accum=None)
            if waveform not in global_stats:
                global_stats[waveform] = dict(n=[], length=[],
                                              matches=[], full_matches=[],
                                              loffset=[], roffset=[])
            for name in cnames:
                global_stats[waveform][name].append(data[name])
            if data['full_matches'] > 0:  # otherwise offsets will be empty
                global_stats[waveform]['loffset'].extend(data['loffset'])
                global_stats[waveform]['roffset'].extend(data['roffset'])

    def calculate_global_stats():
        for waveform in global_stats:
            wstats = global_stats[waveform]
            for name in wstats:
                if name in cnames:
                    accum = sum
                else:  # loffset or roffset
                    accum = opts.accum
                if not [name]:
                    wstats[name] = 0
                wstats[name] = accum(wstats[name]) if wstats[name] else -1
        return global_stats

    def make_global_cfm():
        waveforms = set(chain(*[cfm.categories for cfm in cfms]))
        global_cfm = ConfusionMatrix(waveforms)
        for cfm in cfms:
            for i, j in product(cfm.categories, cfm.categories):
                global_cfm[i, j] += cfm[i, j]
        return global_cfm

    def print_stats(stats):
        writer = csv.DictWriter(sys.stdout, EPGComparisonStats.HEADERS,
                                delimiter='\t')
        writer.writeheader()
        for category in stats.cfm.categories:
            data = stats.get(category, accum=opts.accum)
            for key, val in data.items():
                if key == 'category':
                    continue
                if key in ('length', 'matches'):
                    data[key] = round(val / 100 / 3600, 2)
                elif key in ('loffset', 'roffset'):
                    data[key] = format(val, '.1%') if val != -1 else val
                else:
                    data[key] = round(val, 4)
            writer.writerow(data)
        print('')

    cfms, global_stats = [], dict()
    for basename, group in groups:
        stats = evaluate_group(basename, tuple(group))
        if not stats:
            continue
        if opts.each:
            print_stats(stats)
        accumulate_stats(stats)
    return make_global_cfm(), calculate_global_stats()


def parse_args(argv):
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter)

    parser.add_argument('files', metavar='mark file', nargs='+',
                        help='A mark file (.csv) as generated by AutoEPG.')
    parser.add_argument('--use-tmean', dest='trim', action='store_true',
                        help='Use trimmed mean as accumulator, thus removing '
                             'outliers (defined as 3xIQR, see '
                             'http://en.wikipedia.org/wiki/Interquartile_range)'
                             ' when calculating total offsets.')
    parser.add_argument('--each', action='store_true',
                        help='Report statistics for each EPG profile group.')

    group = parser.add_argument_group('Output')
    group.add_argument('-o', '--output',
                       help='Filename to write the global stats in .csv '
                            'format.')
    group.add_argument('--savefig',
                       help='Filename to write the global confusion matrix as '
                            'an image. IMPORTANT: It requires matplotlib '
                            'python library.')
    group.add_argument('--dpi', type=int, default=150,
                       help='Image resolution given as dots per inch. Default '
                            'is %(default)s dpi.')
    group.add_argument('--cmap', default='GnBu',
                       help='Color map used to draw confusion matrix. Go to '
                            'wiki.scipy.org/Cookbook/Matplotlib/Show_colormaps '
                            'for available options. Default is "%(default)s." '
                            'IMPORTANT: names are case-sensitive. ')
    opts = parser.parse_args(argv)
    opts.accum = (lambda data: tmean(data, k=3.)) if opts.trim else mean
    return opts


def print_global_stats(total_cfm, total_stats, output=None):
    print('\nGlobal stats:\n' if output is None
          else 'Writing stats to {}... '.format(output), end='')
    dialect = 'excel' if output else 'excel-tab'
    output = open(output, 'w') if output is not None else io.StringIO()
    writer = csv.DictWriter(output, EPGComparisonStats.HEADERS,
                            dialect=dialect, lineterminator='\n')
    writer.writeheader()
    for waveform in sorted(total_stats.keys()):
        stats, cfm = dict(category=waveform), total_cfm.binarize(waveform)
        for name in EPGComparisonStats.HEADERS[1:]:
            if name in total_stats[waveform]:
                val = total_stats[waveform][name]
                if name in ('length', 'matches'):
                    stats[name] = round(val / 100 / 3600, 2)
                elif name in ('loffset', 'roffset'):
                    stats[name] = format(val, '.1%')
                else:
                    stats[name] = val
            elif name in ('kappa', 'ckappa'):
                calculator = getattr(cfm, 'kappa')
                corrected = name == 'ckappa'
                stats[name] = round(calculator(corrected), 4)
            else:
                stats[name] = round(getattr(cfm, name), 4)
        writer.writerow(stats)
    if isinstance(output, io.StringIO):
        content = output.getvalue()
        print(content)
    else:
        print('done.')
    output.close()


def save_confusion_matrix(cfm, output, opts):
    try:
        import matplotlib.pyplot as plt
    except ImportError:
        sys.exit('matplotlib library is required to display confusion matrix')
    ext = os.path.splitext(output)[1][1:]

    waveforms = [wf.title() if wf != 'pd' else wf for wf in cfm.categories]
    order = ('Np', 'C', 'pd', 'G', 'E1')
    _cfm = ConfusionMatrix(sorted(waveforms, key=order.index))
    for i, j in product(_cfm.categories, _cfm.categories):
        _cfm[i, j] += cfm[i.lower(), j.lower()] / 3600 / 100
    cfm = _cfm

    ncfm = cfm.copy()
    for j in range(cfm.size):
        total = sum(cfm.column(j))
        for i in range(cfm.size):
            ncfm[i, j] /= total

    ax = plt.figure().add_subplot(111)
    try:
        cmap = getattr(plt.cm, opts.cmap)
    except AttributeError:
        sys.exit('Unknown color map: ' + cmap)
    res = ax.matshow(ncfm._rows, cmap=cmap, vmin=0, vmax=1)

    for i, j in product(range(cfm.size), range(cfm.size)):
        hours = cfm[i][j]
        ax.annotate('{:.1f}\n({:.0%})'.format(hours, ncfm[i][j]),
                    xy=(j, i),
                    horizontalalignment='center',
                    verticalalignment='center')
    plt.xticks(range(len(cfm.categories)), cfm.categories)
    plt.yticks(range(len(cfm.categories)), cfm.categories)

    cbar = plt.colorbar(res, ticks=(0, 0.5, 1))
    cbar.ax.set_yticklabels(('0%', '50%', '100%'))
    plt.savefig(output, dpi=opts.dpi, format=ext, transparent=True)


def main(argv):
    opts = parse_args(argv)
    profiles = tuple(EPGProfile.from_file(f) for f in opts.files)
    groups = groupbyattr(profiles, 'basename')
    global_cfm, global_stats = evaluate_groups(groups, opts)
    print_global_stats(global_cfm, global_stats, opts.output)
    if opts.savefig:
        save_confusion_matrix(global_cfm, opts.savefig, opts)

if __name__ == '__main__':
    main(sys.argv[1:])
